template

  // SAMPLE
  mdc-grid
    mdc-grid-cell(span="12")
      h4 Dialogs

    // CONFIG AREA
    mdc-grid-cell(span="12")
      button(mdc-button="raised: true;" click.delegate="showDialog()") Show Dialog
      button(mdc-button="raised: true;" click.delegate="showDialog4()") Show dialog with colored footer button
      p accept clicked: ${acceptClicked1}
      button(mdc-button="raised: true;" click.delegate="showDialog2()") Show Dialog - scrollable dialog
      p accept clicked: ${acceptClicked2}
      p event counter: ${eventCounter}
    
      mdc-dialog(
        view-model.ref="dialog"
        header="Dialog"
        scrollable="false"
        accept="OK"
        cancel="Cancel"
        on-click.delegate="onDialogClick1($event)")
        span Body elements

      section.mdc-theme--dark              
        mdc-dialog(
          view-model.ref="dialog2"
          header="Dialog with scrollable content"
          scrollable="true"
          accept="OK"
          cancel="Close"
          on-click.delegate="onDialogClick2($event)")
          mdc-list
            each i in [0,1,2,3,4,5,6,7,8,9]
              mdc-list-item item #{i}

      mdc-dialog(
        view-model.ref="dialog4"
        accept="Agree"
        accept-action="true"
        cancel="Disagree"
        on-click.delegate="onDialogClick1($event)")
        p Colored footer button


    // LINKS
    mdc-grid-cell(span="12")
      hr
      a(href="https://material.io/components/web/catalog/dialogs/" target="_blank" data-analytics-category="external" data-analytics-action="mdc-dialog") Material components documentation
      br
      a(href="https://material.io/guidelines/components/dialogs.html" target="_blank" data-analytics-category="external" data-analytics-action="mdg-dialog") Material design guidelines
      hr


    // EXAMPLE
    mdc-grid-cell(span="12")
      // script
      pre
        code-prism(language="typescript").
          import { MdcDialog, IMdcDialogClickEvent } from 'aurelia-mdc-bridge';
          
          private dialog: MdcDialog;
          
          private showDialog() {
            this.dialog.show(true);
          }

          private onDialogClick(event: IMdcDialogClickEvent) {
            const acceptClicked = event.detail;
          }        

      // html
      pre
        code-prism.
          &lt;mdc-dialog
            header="Dialog header"
            accept="OK"
            cancel="Cancel"
            view-model.ref="dialog"
            on-click.delegate="onDialogClick($event)"&gt;

            &lt;p&gt;Dialog content&lt;/p&gt;
          &lt;/mdc-dialog&gt;


    // SCROLLABLE
    mdc-grid-cell(span="12")
      section
        h5 Scrollable
        p.
          Set #[span.mark-text scrollable] attribute to #[span.mark-text true] to enable scrollable content:
        pre
          code-prism.
            &lt;mdc-dialog
              scrollable="true"
              header="Dialog header"
              accept="OK"
              cancel="Cancel"
              view-model.ref="dialog"
              on-click.delegate="onDialogClick($event)"&gt;

              &lt;mdc-list&gt;
                &lt;mdc-list-item&gt;Item 0&lt;/mdc-list-item&gt;
                ...
              &lt;/mdc-list&gt;
            &lt;/mdc-dialog&gt;
        

    // DIALOG ACTION COLOR
    mdc-grid-cell(span="12")
      section
        h5 Dialog Action Color
        p.
          Dialog actions use system colors by default, but you can use a contrasting color, such as the paletteâ€™s secondary color, 
          to distinguish dialog actions from dialog content.
        p.
          To apply secondary color use attribute #[span.mark-text accept-action="true"] for accept button
          and #[span.mark-text cancel-action="true"] for cancel button:

      pre
        code-prism.
          &lt;mdc-dialog
            accept="OK"
            accept-action="true"
            cancel="Cancel"
            view-model.ref="dialog"&gt;

            &lt;p&gt;Dialog content&lt;/p&gt;
          &lt;/mdc-dialog&gt;

    // DISABLE ACCEPT BUTTON
    mdc-grid-cell(span="12")
      section
        h5 Disable Accept Button
        p.
          It is possible to disable affirmative action until a choise is made. 
          This can be useful if you need to validate before accepting dialog.
        p To disable accept button set attribute #[span.mark-text accept-disabled="true"]:

      pre
        code-prism.
          &lt;mdc-dialog
            accept="OK"
            cancel="Cancel"
            accept-disabled.bind="!isValid"
            view-model.ref="dialog"&gt;

            &lt;p&gt;Dialog content&lt;/p&gt;
          &lt;/mdc-dialog&gt;
      
      // DISABLE ACCEPT EXAMPLE
      button(mdc-button="raised: true;" click.delegate="showDialog5()") Disable Accept Button Example
      mdc-dialog(
        view-model.ref="dialog5"
        header="Access permission"
        accept="OK"
        cancel="Cancel"
        accept-action="true"
        accept-disabled.bind="!accessPermission")

        mdc-radio(name="parentPermission" value="sister" checked.bind="accessPermission") Give sister access to room
        br
        mdc-radio(name="parentPermission" value="brother" checked.bind="accessPermission") Give brother access to room


    // CUSTOM ACCEPT FUNCTION
    mdc-grid-cell(span="12")
      section
        h5 Custom Accept Function
        p.
          If you have to to send a API request to validate before closing the
          dialog, you must create a custom accept function. 
        p Custom accept function:

      pre
        code-prism(language="typescript").
          private onAccept() {
            apiRequest(..).then(() => {
              this.dialog.show(false);
            })
          }

      p Replace accept function:
      pre
        code-prism(language="typescript").
          this.dialog.foundation.accept = this.onAccept.bind(this);
      
      // CUSTOM ACCEPT FUNCTION EXAMPLE
      button(mdc-button="raised: true;" click.delegate="showDialog6()") Example
      mdc-dialog(
        view-model.ref="dialog6"
        accept="Accept"
        cancel="Cancel")

        p Press Accept button to start close counter
        p Counter: ${dialog6Counter}
        

    // THEMING
    mdc-grid-cell(span="12")
      section
        h5 Theming
        p.mdc-typography--subheading2 Dark Theme Considerations
        p.
          When using #[span.mark-text mdc-theme--dark] / #[span.mark-text mdc-dialog--theme-dark], 
          the dialog by default sets its background color to #303030. 
          You can override this by either overridding the 
          #[span.mark-text --mdc-dialog-dark-theme-bg-color], overridding the 
          #[span.mark-text $mdc-dialog-dark-theme-bg-color] sass variable, 
          or directly in CSS:

        pre
          code-prism(language="css").
            .mdc-theme--dark .mdc-dialog__surface,
            .mdc-dialog--theme-dark .mdc-dialog__surface {
              background-color: /* custom bg color */;
            }      


    // OPEN / CLOSED EVENTS
    mdc-grid-cell(span="12")
      h5 Opened / Closed events
      p These events fire after the dialog has beed opened / closed.
      pre
        code-prism.
          <mdc-dialog on-opened.delegate="onOpened()" on-closed.delegate="onClosed()"></mdc-dialog>
      button(mdc-button="raised: true;" click.delegate="showDialog3()") Open dialog
      mdc-dialog(
        view-model.ref="dialog3"
        header="Dialog"
        accept="OK"
        cancel="Cancel"
        on-opened.delegate="onOpened3()"
        on-closed.delegate="onClosed3()")
        mdc-text-field(view-model.ref="focusMeElement") Should be focused
      
      p Event: ${openCloseStatus3}

      pre
        code-prism.
          &lt;mdc-dialog
            header="Dialog"
            accept="OK"
            cancel="Cancel"
            on-opened.delegate="onOpened()"&gt;
            &lt;mdc-text-field view-model.ref="focusMe"&gt;Should be focused&lt;/mdc-text-field&gt;
          &lt;/mdc-dialog&gt;
      pre
        code-prism(language="typescript").
          import { TaskQueue, autoinject } from 'aurelia-framework';
          import { MdcTextField } from 'aurelia-mdc-bridge';
          ...
          private focusMe: MdcTextField;

          constructor(private taskQueue: TaskQueue) {}

          private onOpened() {
            this.taskQueue.queueTask(() => {
              this.focusMe.focus();
            });
          }



    // USE SLOTS FOR DIALOG BOXES
    mdc-grid-cell(span="12")
      h5 Use header and footer slots
      p If you want to customize the content of the header and footer, use slots:
          
      pre
        code-prism.
          <mdc-dialog>
            <span slot="header">
              <i class="material-icons md-24 primary">star</i>
              <span class="mdc-dialog__header__title">Header</span>
            </span>
            
            <span slot="footer">
              <button mdc-button class="mdc-dialog__footer__button mdc-dialog__footer__button--accept">
                Accept
              </button>
            </span>

            <p>Body</p>
          </mdc-dialog>

      button(mdc-button="raised: true;" click.delegate="showDialog7()") Open Dialog
      br

      mdc-dialog(view-model.ref="dialog7")
        span(slot="header")
          i.material-icons.md-24.primary star
          span.mdc-dialog__header__title Header
        span(slot="footer")
          button(mdc-button).mdc-dialog__footer__button.mdc-dialog__footer__button--accept Accept

        p Body
